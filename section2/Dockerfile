#  대문자 FROM 으로 시작, 다른 베이스 이미지에 여러 이미지 구축, node라는 이름의 이미지가 존재하며 찾을 수 있다. 
# FROM node     
# WORKDIR /app
# 도커에게 로컬 머신에 있는 파일이 이미지에 들어가야하는지 알림  1번경로 : 컨테이너 외부(이미지 외부): 이미지로 복사되어야 할 파일이 있는 곳. 2번 경로: 컨테이너 내부(이미지 내부)
# COPY . /app     
# 이 프로젝트의  모든 폴더, 하위폴더,파일을 컨테이너 내부 app이라는 폴더로 복사, 폴더가 존재하지 않는 경우 이미지와 컨테이너에 생성
#COPY . ./   # 도커 컨테이너의 현재 작업 디렉터리
# RUN npm install
# 복사한 이미지에서 명령을 RUN ( nodejs사용을 위한 npm install )
# 디폴트로 이런 명령은 모두 도커 컨테이너 및 이미지의 작업 디렉터리(컨테이너 파일 시스템의 루트폴더)에서 실행된다. npm.install도 app폴더 내부에서 실행 시키고 싶은 경우
# 모든것을 복사하기 전에 WORKDIR 를 통해 명령 설정 

# 해당 서버.js의 포트번호는 80
#컨테이너 내부의 노드애플리케이션에서 포트번호 80이 수신할때 컨테이너는 포트번호를 로컬머신에 노출하지 않는다.
# 컨테이너 내부에서만 무언가를 수신 대기중이기 때문에 해당포트에서 수신할 수 없음 
# ! 언제나 Dockerfile 마지막 명령어 전에 컨테이너가 시작될 때, 로컬시스템에 포트번호를 노출시켜야한다.
# EXPOSE 80

# 작업이 완료되면 서버를 실행하라는 명령어
# CMD 배열["문자열1" ,"문자열2"]  두개의 문자열로 분할
#CMD node server.js X
# CMD [ "node","server.js" ]     
# 이미지가 생성될 때 실행 되지 않고 이미지 기반으로 컨테이너가 시작될 때 실행
 
# RUN node server.js  이미지가 빌드될 때마다 실행되기 때문에 이렇게 쓰면 안댐 이미지는 컨테이너의 템플렛이다.! 
# 이미지를 실행하는 게 아닌 이미지를 기반으로 컨테이너를 실행

#   도커파일 최적화 npm install 위치 변경
FROM node:14
WORKDIR /app
COPY package.json /app
RUN npm install
COPY . /app
EXPOSE 80
CMD ["node","server.js"]